#!/bin/bash
# WARNING: this script will destroy data on the selected disk.


# Update the system clock
timedatectl set-ntp true



set -euEo pipefail
trap 'echo "${BASH_SOURCE:-unknown}:${LINENO:-unknown}: $BASH_COMMAND";' ERR

# Set up logging
#exec 1> >(tee "stdout.log")
#exec 2> >(tee "stderr.log")

# REPO_URL="https://github.com/moretticb/archlinux/releases/latest/download"
readonly REPO_URL="https://github.com/moretticb/archlinux/releases/download/v0.0.1-alpha"
readonly MIRRORLIST_URL="https://archlinux.org/mirrorlist/?country=BR&protocol=http&protocol=https&use_mirror_status=on"

pacman -Sy --noconfirm pacman-contrib dialog

echo "Updating mirror list"
curl -s "$MIRRORLIST_URL" | \
    sed -e 's/^#Server/Server/' -e '/^#/d' | \
    rankmirrors -n 5 - > /etc/pacman.d/mirrorlist

# Get infomation from user
readonly hostname=$(dialog --stdout --inputbox "Enter hostname" 0 0) || exit 1
clear
: "${hostname:?'hostname cannot be empty'}"

readonly user=$(dialog --stdout --inputbox "Enter admin username" 0 0) || exit 1
clear
: "${user:?'user cannot be empty'}"

password=$(dialog --stdout --passwordbox "Enter admin password" 0 0) || exit 1
clear
: "${password:?'password cannot be empty'}"
password_confirmation=$(dialog --stdout --passwordbox "Enter admin password again" 0 0) || exit 1
clear
[[ "$password" == "$password_confirmation" ]] || ( echo "Passwords did not match"; exit 1; )


readonly devicelist=$(lsblk -dplnx size -o name,size | grep -Ev "boot|rpmb|loop" | tac)
# shellcheck disable=SC2086
readonly device=$(dialog --stdout --menu "Select installation disk" 0 0 0 ${devicelist}) || exit 1
clear



# Partition the disks
readonly dumpfile=$(dialog --stdout --title "Select a cfdisk dump file or press ESC to manage partitions manually" --fselect . 15 60)
clear
if test -f "$dumpfile"; then
	echo "Dumping $dumpfile"
	sleep 1
	sfdisk $device < $dumpfile
else
	echo "Managing $device partitions manually with cfdisk..."
	sleep 1
	cfdisk $device
fi

#readonly partlist=$(fdisk -l | awk '//{print $1,$5"__"$7"__"$8"__"$9}' | grep $(echo $device | cut -d"/" -f 3))
#readonly partlist=$(lsblk | grep $(echo $device | cut -d"/" -f 3) | grep part | sed "s/[^0-9a-zA-Z .]//g" | awk '//{print $1, $4}')
readonly partlist=$(fdisk -l | grep "^${device}" | sed -E "s/([0-9]) ([0-9])/\1  \2/g" | awk -F" {2,}" '{print $1 " \"" $5,$6 "\""}')

#readonly ospart=$(dialog --stdout --menu "Select partition to install Arch Linux" 0 0 0 ${partlist}) || exit 1
eval "$(echo dialog --stdout --menu "\"Select partition to install Arch Linux\"" 0 0 0 ${partlist}) > /tmp/ospart"
readonly ospart=$(cat /tmp/ospart)

#readonly swappart=$(dialog --stdout --menu "Select swap partition" 0 0 0 ${partlist}) || exit 1
eval "$(echo dialog --stdout --menu "\"Select swap partition\"" 0 0 0 ${partlist}) > /tmp/swappart"
readonly swappart=$(cat /tmp/swappart)

#readonly efipart=$(dialog --stdout --menu "Select EFI partition" 0 0 0 ${partlist}) || exit 1
eval "$(echo dialog --stdout --menu "\"Select EFI partition\"" 0 0 0 ${partlist}) > /tmp/efipart"
readonly efipart=$(cat /tmp/efipart)





# Format the partitions
mkfs.ext4 ${ospart}

# EFI partition remains untouched, since windows installer already took care of that

# initializing and enabling swap
mkswap ${swappart}
swapon ${swappart}



# mounting root partition
mount ${ospart} /mnt




 ## Setup the disk and partitions
#readonly efi_size=128
#readonly efi_end=$(( efi_size + 1 ))
#readonly swap_size=1024
#readonly swap_end=$(( swap_size + efi_size + 1 ))
#
#parted --script "${device}" -- mklabel gpt \
#  mkpart ESP fat32 1Mib ${efi_end}MiB \
#  set 1 boot on \
#  mkpart primary linux-swap ${efi_end}MiB ${swap_end}MiB \
#  mkpart primary ext4 ${swap_end}MiB 100%
#
## Simple globbing was not enough as on one device I needed to match /dev/mmcblk0p1
## but not /dev/mmcblk0boot1 while being able to match /dev/sda1 on other devices.
## shellcheck disable=SC2010
#readonly part_boot="$(ls "${device}"* | grep -E "^${device}p?1$")"
## shellcheck disable=SC2010
#readonly part_swap="$(ls "${device}"* | grep -E "^${device}p?2$")"
## shellcheck disable=SC2010
#readonly part_root="$(ls "${device}"* | grep -E "^${device}p?3$")"
#
#wipefs "${part_boot}"
#wipefs "${part_swap}"
#wipefs "${part_root}"
#
#mkfs.vfat -F32 "${part_boot}"
#mkswap "${part_swap}"
#mkfs.f2fs -f "${part_root}"
#
#swapon "${part_swap}"
#mount "${part_root}" /mnt
#mkdir /mnt/boot
#mount "${part_boot}" /mnt/boot




# Install and configure the basic system
cat >>/etc/pacman.conf <<EOF
[moretticb]
SigLevel = Optional TrustAll
Server = $REPO_URL
EOF

# Install essential packages
#pacstrap /mnt moretticb-base
while pacstrap /mnt moretticb-base; ret=$?; [ $ret -ne 0 ]; do
	dialog --title "unable to pacstrap" --backtitle "pacstrap error" --yesno "Do you want to try again?" 0 0
	if [ "$?" -ne "0" ]; then
		exit 1
	fi

	# sleep, so ctrl+c can break this infinite loop if no internet
	sleep 1
done


# Generate fstab
genfstab -t PARTUUID /mnt >> /mnt/etc/fstab



# Setting time zone
readonly timezone=$(dialog --stdout --title "Set a timezone" --fselect /mnt/usr/share/zoneinfo/ 15 70) || exit 1
clear
ln -sf ${timezone} /mnt/etc/localtime


# Running hwclock according to the selected timezone
arch-chroot /mnt hwclock --systohc


# Localization
locales=$(dialog --stdout --checklist "Select en_US.UTF-8 UTF-8 and other needed locales" 0 0 0 $(cat /mnt/etc/locale.gen | grep -E "^#[a-z]{2}" | cut -d"#" -f 2 | sed "s/[ ]*$/ off/g")) || exit 1
clear

cat /mnt/etc/locale.gen | grep -E $(echo $locales | sed "s/ /|/g") | grep "#" | cut -d"#" -f 2 > /tmp/temp_locales.txt
cat /tmp/temp_locales.txt >> /mnt/etc/locale.gen

arch-chroot /mnt locale-gen

echo "LANG=$(cat /tmp/temp_locales.txt | head -1 | cut -d" " -f 1)" > /mnt/etc/locale.conf
#echo "LANG=en_US.UTF-8" > /mnt/etc/locale.conf



# Setting hostname
echo "${hostname}" > /mnt/etc/hostname


cat >>/mnt/etc/pacman.conf <<EOF

[moretticb]
SigLevel = Optional TrustAll
Server = $REPO_URL

[multilib-testing]
Include = /etc/pacman.d/mirrorlist

[multilib]
Include = /etc/pacman.d/mirrorlist
EOF

# refreshing urls from multilib and multilib-testing
arch-chroot /mnt pacman -Syy



#arch-chroot /mnt bootctl install
#
#cat <<EOF > /mnt/boot/loader/loader.conf
#default arch
#EOF
#
#cat <<EOF > /mnt/boot/loader/entries/arch.conf
#title    Arch Linux
#linux    /vmlinuz-linux
#initrd   /intel-ucode.img
#initrd   /initramfs-linux.img
#options  root=PARTUUID=$(blkid -s PARTUUID -o value "$part_root") rw
#EOF


arch-chroot /mnt useradd -mU -s /bin/bash -G wheel "$user"

sed -Ei "/^#[ ]*%wheel[^NOPSWD]*$/s/^#[ ]*//g" /mnt/etc/sudoers
#cat /mnt/etc/sudoers | sed -E "s/^#[ ](%wheel ALL=(ALL) ALL)$/\1/g" > /tmp/tmp_sudoers
#cat /tmp/tmp_sudoers > /mnt/etc/sudoers

arch-chroot /mnt chsh -s /bin/bash root
arch-chroot /mnt chsh -s /bin/bash "$user"

echo "$user:$password" | chpasswd --root /mnt
echo "root:$password" | chpasswd --root /mnt




# XPS13 9343 DRIVERS

# wifi driver (assuming linux-headers has already been installed)
arch-chroot /mnt pacman -S --noconfirm broadcom-wl

# End of XPS13 9343 DRIVERS



arch-chroot /mnt systemctl enable NetworkManager.service




# downloading post install script, leaving at user home directory
curl -sL "https://raw.githubusercontent.com/$(echo ${REPO_URL} | cut -d'/' -f 4,5)/develop/post_install" > /mnt/home/$user/post_install
arch-chroot /mnt chmod +x /home/$user/post_install



# Bootloader

mkdir -p /mnt/boot/efi
mount ${efipart} /mnt/boot/efi


arch-chroot /mnt pacman -S --noconfirm grub efibootmgr mtools os-prober

# enabling os-prober to work at grub-mkconfig step so windows can also be detected
echo "GRUB_DISABLE_OS_PROBER=false" >> /mnt/etc/default/grub

arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot/efi/ --bootloader-id=GRUB --recheck

arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg


echo "Installation finished."
